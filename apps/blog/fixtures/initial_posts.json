[
  {
    "model": "blog.blogpost",
    "pk": 1,
    "fields": {
      "title": "Construindo este site com ajuda do Claude Code",
      "slug": "construindo-site-com-claude-code",
      "content": "Decidi ser 100% transparente sobre como este site foi criado, desde a primeira linha de c√≥digo at√© o deploy automatizado que roda agora. E a verdade √©: o **Claude Code** foi fundamental em cada etapa.\n\n## Como come√ßar: Instalando o Claude Code\n\nAntes de mergulhar no desenvolvimento, vou explicar como voc√™ pode replicar esse processo.\n\n### Instala√ß√£o do Claude Code\n\nO Claude Code √© uma CLI oficial da Anthropic que funciona diretamente no terminal. Para instalar:\n\n```bash\n# Via npm (recomendado)\nnpm install -g @anthropic-ai/claude-code\n\n# Ou via pip\npip install claude-code\n```\n\n**Configura√ß√£o inicial:**\n```bash\n# Configurar API key\nclaude-code auth\n\n# Verificar instala√ß√£o\nclaude-code --version\n```\n\n### Documenta√ß√£o completa\nToda a documenta√ß√£o oficial est√° em: **https://docs.anthropic.com/en/docs/claude-code**\n\nSe√ß√µes mais √∫teis:\n- **Overview**: Introdu√ß√£o e conceitos\n- **CLI Usage**: Comandos e flags principais\n- **Memory**: Sistema de mem√≥ria do Claude.md\n- **Settings**: Configura√ß√µes e personaliza√ß√£o\n- **Tutorials**: Workflows comuns e exemplos pr√°ticos\n\n### Workflow h√≠brido: ChatGPT + Claude Code\n\nUma estrat√©gia poderosa que uso √© **combinar ChatGPT e Claude Code**:\n\n**1. ChatGPT para brainstorming e prompts:**\n```\nChatGPT: \"Preciso criar um sistema de blog em Django. \nMe ajude a estruturar um prompt detalhado para o Claude Code \ncom todos os requisitos t√©cnicos.\"\n```\n\n**2. Claude Code para implementa√ß√£o:**\nPego o prompt refinado do ChatGPT e uso no Claude Code para:\n- Gerar c√≥digo Django limpo\n- Implementar funcionalidades espec√≠ficas\n- Resolver problemas t√©cnicos em tempo real\n\n**Exemplo de prompt gerado no ChatGPT:**\n> \"Crie um sistema de blog Django com: (1) Model BlogPost com slug autom√°tico, tags e SEO, (2) Views com pagina√ß√£o, (3) Templates responsivos com TailwindCSS, (4) Admin configurado, (5) Template tags para Markdown. Use boas pr√°ticas Django e estrutura modular.\"\n\n**Vantagens dessa abordagem:**\n- ChatGPT excelente para **planejamento** e **estrutura√ß√£o de ideias**\n- Claude Code superior para **implementa√ß√£o** e **c√≥digo de qualidade**\n- Prompts mais **detalhados** e **estruturados**\n\n## O in√≠cio: Arquitetura profissional\n\nMinha primeira decis√£o foi usar Django com uma estrutura profissional desde o in√≠cio. Queria algo escal√°vel, n√£o apenas um template est√°tico. O Claude me ajudou a definir uma arquitetura modular e bem organizada:\n\n```python\n# Estrutura inicial do projeto\nportfolio/\n‚îú‚îÄ‚îÄ config/                 # Configura√ß√µes centralizadas\n‚îÇ   ‚îú‚îÄ‚îÄ settings/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.py        # Settings comuns\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dev.py         # Desenvolvimento\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ prod.py        # Produ√ß√£o\n‚îÇ   ‚îú‚îÄ‚îÄ urls.py            # URLs principais\n‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py            # WSGI para deploy\n‚îî‚îÄ‚îÄ apps/                   # Apps modulares\n    ‚îú‚îÄ‚îÄ core/              # Funcionalidades b√°sicas\n    ‚îú‚îÄ‚îÄ blog/              # Sistema de blog\n    ‚îú‚îÄ‚îÄ calculator/        # Calculadora CLT vs PJ\n    ‚îî‚îÄ‚îÄ users/             # Usu√°rios (futuro)\n```\n\n## Definindo a identidade aut√™ntica\n\nO momento mais interessante foi quando percebi que n√£o queria um \"portf√≥lio\" tradicional. Usei este prompt com o Claude:\n\n> \"N√£o quero usar a palavra 'portf√≥lio' em lugar nenhum. Meu objetivo √© mostrar o que fa√ßo, minhas habilidades e o que desenvolvo, mas de maneira mais aut√™ntica, direta e profissional.\"\n\n**Resultado:** Transformamos de \"Bem-vindo ao meu Portf√≥lio\" para \"**Desenvolvedor de Solu√ß√µes Web**\" e criamos a identidade `lpcoutinho.dev` no header. Muito mais profissional e aut√™ntico.\n\n## A calculadora CLT vs PJ: Do conceito ao deploy\n\nEste foi o projeto mais complexo e revelador. A inspira√ß√£o veio da excelente calculadora da [Nagringa](https://www.nagringa.dev/calculadora-clt-vs-pj), que tem design impec√°vel e funcionalidades bem pensadas.\n\n### Funcionalidades implementadas:\n- **C√°lculos precisos** baseados na legisla√ß√£o brasileira (INSS, IRRF, FGTS)\n- **Interface em tempo real** com JavaScript para UX fluida\n- **Sincroniza√ß√£o inteligente** entre formul√°rios CLT e PJ\n- **Sistema de URL compartilh√°vel** para salvar e compartilhar c√°lculos\n- **Local storage** para hist√≥rico de compara√ß√µes\n- **Tooltips explicativos** para cada campo\n- **Design responsivo** com TailwindCSS\n\n### Desafios t√©cnicos enfrentados:\n\n**1. Sincroniza√ß√£o de sal√°rios:** Inicialmente copiava a cada caractere digitado (1, 10, 100, 1000...). \n**Solu√ß√£o:** Implementar eventos `focus`/`blur` para sincronizar apenas no primeiro preenchimento.\n\n**2. Precis√£o financeira:** Usar `Decimal` em vez de `float` para evitar erros de arredondamento.\n\n**3. UX em tempo real:** Debounce no JavaScript para calcular automaticamente sem sobregerar o servidor.\n\n**4. Renderiza√ß√£o Markdown:** Inicialmente o blog n√£o renderizava `##` e `` ` `` corretamente.\n**Solu√ß√£o:** Template tags customizados com biblioteca markdown.\n\n## O Build Log: Sistema completo de blog\n\nCriar esta se√ß√£o (que chamei de \"**Build Log**\" em vez de blog) foi uma jornada pr√≥pria:\n\n### Backend Django:\n- **Model BlogPost** com slug autom√°tico, tags, SEO e timestamps\n- **Views** com pagina√ß√£o e filtros\n- **Admin** configurado para cria√ß√£o f√°cil de conte√∫do\n- **Template tags** para renderiza√ß√£o de Markdown\n\n### Frontend moderno:\n- **Templates responsivos** com TailwindCSS\n- **Syntax highlighting** para blocos de c√≥digo\n- **Cards clic√°veis** - toda a pr√©via √© um link para o post\n- **Typography** otimizada para leitura t√©cnica\n\n```python\n# Exemplo do model BlogPost\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    slug = models.SlugField(unique=True, blank=True)\n    content = models.TextField()  # Markdown\n    excerpt = models.TextField(max_length=300)\n    tags = models.CharField(max_length=200)\n    published = models.BooleanField(default=True)\n    \n    def reading_time(self):\n        return max(1, round(len(self.content.split()) / 250))\n```\n\n## Deploy automatizado: Do c√≥digo √† produ√ß√£o\n\nA parte mais empolgante foi criar um **workflow de CI/CD completo**. Aqui est√° o que constru√≠mos:\n\n### 1. Containeriza√ß√£o com Docker\n```dockerfile\nFROM python:3.12.3-slim\n# Configura√ß√£o otimizada para produ√ß√£o\n# WhiteNoise para arquivos est√°ticos\n# Gunicorn como WSGI server\n# Health checks integrados\n```\n\n### 2. GitHub Actions para deploy autom√°tico\n```yaml\nname: Deploy to Production\non:\n  push:\n    branches: [main]\n  \n# Deploy via SSH para VPS\n# Build da imagem Docker\n# Update do Docker Swarm\n# Cleanup de imagens antigas\n```\n\n### 3. Docker Swarm com Traefik\n- **SSL autom√°tico** via Let's Encrypt\n- **Load balancing** e proxy reverso\n- **Health checks** e restart autom√°tico\n- **Volumes persistentes** para dados\n\n### 4. Problemas de produ√ß√£o resolvidos\n\n**Erro de permiss√µes no container:**\n```bash\nmkdir: cannot create directory '/app/data': Permission denied\n```\n**Solu√ß√£o:** Ajustar Dockerfile para criar diret√≥rios antes da troca de usu√°rio.\n\n**Problemas de volumes:**\nInicialmente o volume mount sobrescrevia o c√≥digo da imagem.\n**Solu√ß√£o:** Volumes separados para dados, static, media e logs.\n\n## Tecnologias e ferramentas\n\n### Backend:\n- **Django 5.2.2** com apps modulares\n- **SQLite** para simplicidade (migra√ß√£o para PostgreSQL planejada)\n- **WhiteNoise** para servir arquivos est√°ticos\n- **Gunicorn** como WSGI server\n\n### Frontend:\n- **TailwindCSS** para design system consistente\n- **JavaScript vanilla** para interatividade\n- **Markdown** com syntax highlighting\n\n### DevOps:\n- **Docker** para containeriza√ß√£o\n- **GitHub Actions** para CI/CD\n- **Docker Swarm** para orquestra√ß√£o\n- **Traefik** para proxy reverso e SSL\n\n## Processo de desenvolvimento colaborativo\n\nO que mais me impressionou foi a **colabora√ß√£o iterativa** com o Claude. N√£o √© \"deixar a IA fazer tudo\" - √© ter um parceiro t√©cnico experiente.\n\n### Exemplos de colabora√ß√£o:\n\n**Eu:** \"A sincroniza√ß√£o est√° copiando caractere por caractere\"\n**Claude:** Identificou o problema e sugeriu `focus`/`blur` events\n\n**Eu:** \"Campos devem come√ßar vazios, n√£o com zero\"\n**Claude:** Modificou inicializa√ß√£o para aplicar apenas defaults espec√≠ficos\n\n**Eu:** \"Erro de banco no Portainer: Permission denied\"\n**Claude:** Analisou logs e corrigiu permiss√µes do Docker\n\n## Este pr√≥prio post\n\nEste post que voc√™ est√° lendo agora √© um **exemplo perfeito** do processo. Come√ßou simples, mas evolu√≠ para incluir:\n\n- ‚úÖ Todo o processo t√©cnico at√© agora\n- ‚úÖ Desafios reais e solu√ß√µes implementadas\n- ‚úÖ C√≥digo examples e configura√ß√µes\n- ‚úÖ Preview cards completamente clic√°veis\n- ‚úÖ Workflow de CI/CD documentado\n\n**Meta-momento:** Estou usando o Claude para escrever sobre como uso o Claude! ü§Ø\n\n## Aprendizados fundamentais\n\n### 1. IA como pair programming\nO Claude funciona como um **tech lead experiente** que:\n- Conhece boas pr√°ticas de arquitetura\n- Identifica problemas rapidamente\n- Sugere solu√ß√µes baseadas em padr√µes consolidados\n- Explica o \"porqu√™\" das decis√µes t√©cnicas\n\n### 2. Velocidade vs. qualidade\n**Mito:** IA gera c√≥digo ruim rapidamente\n**Realidade:** IA gera c√≥digo limpo que segue padr√µes, acelerando desenvolvimento\n\n### 3. Foco no que importa\nEm vez de passar horas pesquisando \"como implementar X\", posso focar em:\n- **Arquitetura** e decis√µes de design\n- **L√≥gica de neg√≥cio** espec√≠fica\n- **Experi√™ncia do usu√°rio**\n- **Resolu√ß√£o de problemas reais**\n\n## Pr√≥ximos passos documentados\n\n### T√©cnico:\n- [ ] Migra√ß√£o para PostgreSQL\n- [ ] Sistema de cache com Redis\n- [ ] Monitoramento com Prometheus\n- [ ] Backup automatizado\n- [ ] Dark mode toggle\n\n### Funcionalidades:\n- [ ] Mais calculadoras/ferramentas\n- [ ] Se√ß√£o de automa√ß√µes N8N\n- [ ] Sistema de coment√°rios\n- [ ] Analytics de performance\n- [ ] API REST para integra√ß√µes\n\n## Conclus√£o transparente\n\nUsar IA no desenvolvimento **n√£o √© substituir o desenvolvedor**. √â ter um **multiplicador de for√ßa** que:\n\n- ‚úÖ Acelera implementa√ß√£o sem comprometer qualidade\n- ‚úÖ Sugere melhores pr√°ticas que eu posso n√£o conhecer\n- ‚úÖ Identifica problemas antes que se tornem bugs\n- ‚úÖ Documenta c√≥digo e decis√µes automaticamente\n\n**O resultado:** C√≥digo limpo, funcional, que eu entendo completamente e posso manter/evoluir.\n\n**Este site rodando em produ√ß√£o** √© a prova de que essa abordagem funciona. Do desenvolvimento local ao deploy automatizado, tudo constru√≠do com transpar√™ncia total.\n\n---\n\n*Este build log continuar√° documentando cada evolu√ß√£o do projeto. C√≥digo fonte ser√° disponibilizado em breve no GitHub - continue acompanhando para ver os pr√≥ximos experimentos! üöÄ*",
      "excerpt": "Tutorial completo: como instalar Claude Code, workflow h√≠brido com ChatGPT, constru√ß√£o do site Django com deploy automatizado. Inclui arquitetura, calculadora CLT vs PJ, CI/CD, Docker e resolu√ß√£o de problemas reais de produ√ß√£o.",
      "created_at": "2024-12-07T15:30:00Z",
      "updated_at": "2024-12-07T15:30:00Z",
      "published": true,
      "meta_description": "Relato transparente sobre como constru√≠ este site usando Claude Code, Django e IA. Bastidores t√©cnicos, decis√µes de arquitetura e aprendizados.",
      "tags": "django, ia, claude-code, desenvolvimento, python, javascript, docker, ci-cd, deploy, markdown, blog, chatgpt, tutorial, compartilhamento"
    }
  }
]